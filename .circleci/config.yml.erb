# To update the build configuration, edit the "builds" array below and run:
#
#   rake circleci
#
<%
  rails51 = '5.1.7'
  rails52 = '5.2.8'
  rails60 = '6.0.5'
  rails61 = '6.1.6'
  rails70 = '7.0.3'

  builds = [
    # 2.6
    ['2.6', rails51],
    ['2.6', rails52],
    ['2.6', rails60],
    ['2.6', rails61],

    # 2.7
    ['2.7', rails51],
    ['2.7', rails52],
    ['2.7', rails60],
    ['2.7', rails61],
    ['2.7', rails70],

    # 3.0
    ['3.0', rails60],
    ['3.0', rails61],
    ['3.0', rails70],

    # 3.1
    ['3.1', rails60],
    ['3.1', rails61],
    ['3.1', rails70, true],
  ]

  main_build = builds.find { |_, _, is_main_build| is_main_build }
%>

version: 2.1

shared_build_steps: &shared_build_steps
  - checkout

  - attach_workspace:
      at: /tmp/workspace

  - run:
      name: Downloading CodeClimate Test Reporter
      command: |
        curl -sL https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
        chmod +x ./cc-test-reporter

  - run:
      name: Storing Rails Version
      command: |
        echo "$RUBY_VERSION/$RAILS_VERSION" > RAILS_VERSION
        cat RAILS_VERSION

  # Download and cache dependencies
  - restore_cache:
      keys:
      - dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "RAILS_VERSION" }}-{{ checksum "Gemfile" }}-{{ checksum "meta-tags.gemspec" }}
      # fallback to using the latest cache if no exact match is found
      - dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "RAILS_VERSION" }}

  - run:
      name: Installing Dependencies
      command: |
        bundle config set --local path vendor/bundle
        bundle check || (bundle install --jobs=4 --retry=3 && bundle clean)

  - save_cache:
      paths:
        - ./vendor/bundle
      key: dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "RAILS_VERSION" }}-{{ checksum "Gemfile" }}-{{ checksum "meta-tags.gemspec" }}

  # run tests!
  - run:
      name: Running Tests
      command: |
        mkdir /tmp/test-results
        TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"

        bundle exec rspec --format progress \
                          --format RspecJunitFormatter \
                          --out /tmp/test-results/rspec.xml \
                          --format progress \
                          $TEST_FILES

  - when:
      condition: << parameters.is_main_build >>
      steps:
        - run:
            name: Verify Ruby Types (Static)
            command: |
              bundle exec rake steep

        - run:
            name: Verify Ruby Types (Runtime)
            command: |
              bundle exec rake rbs:spec

  - run:
      name: Formatting Coverage
      command: |
        ./cc-test-reporter format-coverage --input-type simplecov --output coverage/codeclimate.coverage.json

  # collect reports
  - store_test_results:
      path: /tmp/test-results
  - store_artifacts:
      path: /tmp/test-results
      destination: test-results

  - persist_to_workspace:
      root: ~/meta-tags
      paths:
        - "*/coverage/codeclimate.coverage.json"
        - "*/cc-test-reporter"

jobs:
  <% builds.each do |ruby_version, rails_version, is_main_build| %>
  build-ruby<%= ruby_version.tr('.', '') %>-rails-<%= rails_version.tr('.', '_') %>:
    parameters:
      is_main_build:
        type: boolean
        default: false
    docker:
      - image: cimg/ruby:<%= ruby_version %>
        environment:
          RAILS_VERSION: <%= rails_version %>
          ENABLE_CODE_COVERAGE: 1
          NO_STEEP: <%= is_main_build ? 0 : 1  %>
    working_directory: ~/meta-tags/ruby<%= ruby_version.tr('.', '') %>-rails-<%= rails_version %>
    steps: *shared_build_steps
  <% end %>

  upload-coverage:
    docker:
      - image: cimg/ruby:<%= main_build[0] %>
    steps:
      - attach_workspace:
          at: /tmp/workspace

      - run:
          name: Uploading Code Coverage
          command: |
            cd /tmp/workspace/ruby<%= main_build[0].tr('.', '') %>-rails-<%= main_build[1] %>
            ./cc-test-reporter upload-coverage --input coverage/codeclimate.coverage.json || true
  tests:
    docker:
      - image: alpine
    steps:
      - run:
          name: All tests succeeded
          command: ':'

workflows:
  version: 2
  test:
    jobs:
      <% builds.each do |ruby_version, rails_version, is_main_build| %>
      - build-ruby<%= ruby_version.tr('.', '') %>-rails-<%= rails_version.tr('.', '_') %>:
          is_main_build: <%= !!is_main_build %>
      <% end %>

      - upload-coverage:
          requires:
            - build-ruby<%= main_build[0].tr('.', '') %>-rails-<%= main_build[1].tr('.', '_') %>

      - tests:
          requires:
            <% builds.each do |ruby_version, rails_version| %>
            - build-ruby<%= ruby_version.tr('.', '') %>-rails-<%= rails_version.tr('.', '_') %>
            <% end %>
